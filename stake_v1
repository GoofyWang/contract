

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Staking is Ownable {
    IERC20 public stakingToken;
    IERC20 public rewardToken;

    uint256 public rewardRate; // 每年奖励比例，单位为百分比 (如：10 = 10%)
    uint256 public minStakingTime; // 最低质押时间，单位为秒

    struct Stake {
        uint256 amount;
        uint256 startTime;
    }

    mapping(address => Stake) public stakes;
    mapping(address => uint256) public rewards;

    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount, uint256 reward);

    constructor(IERC20 _stakingToken, IERC20 _rewardToken, uint256 _rewardRate, uint256 _minStakingTime) {
        stakingToken = _stakingToken;
        rewardToken = _rewardToken;
        rewardRate = _rewardRate;
        minStakingTime = _minStakingTime;
    }

    function stake(uint256 _amount) external {
        require(_amount > 0, "Staking: amount must be greater than 0");
        require(stakingToken.transferFrom(msg.sender, address(this), _amount), "Staking: Transfer failed");

        Stake storage userStake = stakes[msg.sender];
        if (userStake.amount > 0) {
            _claimReward();
        }

        userStake.amount += _amount;
        userStake.startTime = block.timestamp;

        emit Staked(msg.sender, _amount);
    }

    function withdraw() external {
        Stake storage userStake = stakes[msg.sender];
        require(userStake.amount > 0, "Staking: No staked amount");
        require(block.timestamp >= userStake.startTime + minStakingTime, "Staking: Minimum staking time not met");

        _claimReward();

        uint256 stakedAmount = userStake.amount;
        userStake.amount = 0;
        require(stakingToken.transfer(msg.sender, stakedAmount), "Staking: Withdrawal failed");

        uint256 reward = rewards[msg.sender];
        if (reward > 0) {
            rewards[msg.sender] = 0;
            require(rewardToken.transfer(msg.sender, reward), "Staking: Reward transfer failed");
        }

        emit Withdrawn(msg.sender, stakedAmount, reward);
    }

    function _claimReward() internal {
        Stake storage userStake = stakes[msg.sender];
        uint256 stakingTime = block.timestamp - userStake.startTime;
        uint256 reward = (userStake.amount * rewardRate * stakingTime) / (365 days * 100);
        rewards[msg.sender] += reward;
        userStake.startTime = block.timestamp; // 重置质押时间
    }

    function setRewardRate(uint256 _rewardRate) external onlyOwner {
        rewardRate = _rewardRate;
    }

    function setMinStakingTime(uint256 _minStakingTime) external onlyOwner {
        minStakingTime = _minStakingTime;
    }
}
